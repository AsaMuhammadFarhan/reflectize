// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String?
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
}

model User {
  // Default
  id            String    @id @default(cuid())
  name          String
  username      String    @unique
  email         String    @unique
  role          Role      @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?

  demographicDataId String?
  demographicData   DemographicData?
  accounts          Account[]
  sessions          Session[]
  topic             Topic[]
  topicLog          TopicLog[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String   @unique
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  title       String
  description String?
  slug        String      @unique
  theme       TopicTheme?

  preferPublication Boolean
  publishedAt       DateTime?
  likedByIds        String[]  @default([])

  createdById String
  creator     User       @relation(fields: [createdById], references: [id])
  question    Question[]
  topicLog    TopicLog[]
  Analysis    Analysis[]

  @@index([createdById])
}

model Question {
  id       String   @id @default(cuid())
  order    Int
  question String
  options  String[] @default(["Tidak", "Ya"])

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id])

  @@index([topicId])
}

model TopicLog {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  logAnswers String

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  topicId    String
  topic      Topic    @relation(fields: [topicId], references: [id])
  analysisId String
  analysis   Analysis @relation(fields: [analysisId], references: [id])

  @@index([userId])
  @@index([topicId])
  @@index([analysisId])
}

model Analysis {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answerCode String
  feedback   String

  topicId  String
  topic    Topic      @relation(fields: [topicId], references: [id])
  topicLog TopicLog[]

  @@index([topicId])
}

enum TopicTheme {
  FAMILY
  RELATIONSHIP
  CAREER
  HOBBY
}

model DemographicData {
  id              String     @id @default(cuid())
  objective       String
  preferenceTheme TopicTheme
  gender          Gender
  ageRange        String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}
